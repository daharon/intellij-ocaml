plugins {
    id 'idea'
    id 'java'
    id 'org.jetbrains.intellij' version '0.4.6'
    id 'org.jetbrains.kotlin.jvm' version '1.3.61'
}

group 'kuruvila'
version '0.0.1-SNAPSHOT'

repositories {
    mavenCentral()
    //maven { url 'http://dl.bintray.com/jetbrains/intellij-plugin-service' }
}

dependencies {
}

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

intellij {
    version ideaVersion
    plugins 'coverage'
    pluginName 'ocaml-idea'
    intellij.updateSinceUntilBuild false
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

sourceSets {
    main.java.srcDirs += "gen"
}


configurations {
    gen
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin:2.10.3'
    testCompile 'junit:junit:4.12'

    gen 'de.jflex:jflex:1.6.0'
    gen files('lib/gk/grammar-kit-patched.jar')
}


//Copied from the rust plugin

def jflexArgs(srcFlex, targetDir) {
    return [    "--skel",   "parser/OcamlLexer.skeleton",
                "-d",       targetDir,
                srcFlex
    ]
}

task generateOcamlLexer(type: JavaExec) {
    ext.src = "parser/OcamlLexer.flex"
    ext.dst = "gen/org/ocaml/lang/lexer/"

    main = "jflex.Main"

    args = jflexArgs(src, dst)

    inputs  .file   file(src)
    outputs.file("gen/org/ocaml/lang/lexer/_OcamlLexer.java")

    classpath configurations.gen
}

task generateSexpLexer(type: JavaExec) {
    ext.src = "parser/sexp/SexpLexer.flex"
    ext.dst = "gen/org/ocaml/sexp/lexer/"

    main = "jflex.Main"

    args = jflexArgs(src, dst)

    inputs  .file   file(src)
    outputs.file("gen/org/ocaml/sexp/lexer/_SexpLexer.java")

    classpath configurations.gen
}

task generateOcamlPsiAndParser(type: JavaExec) {
    ext.src     = "parser/ocaml.bnf"
    ext.dstRoot = "gen"

    main = "org.intellij.grammar.Main"

    args = [ dstRoot, file(src) ]

    inputs.file(file(src))
    outputs.dir('gen/org/ocaml/lang/parser')

    classpath configurations.gen
}

task generateSexpPsiAndParser(type: JavaExec) {
    ext.src     = "parser/sexp/sexp.bnf"
    ext.dstRoot = "gen"

    main = "org.intellij.grammar.Main"

    args = [ dstRoot, file(src) ]

    inputs  .file   file(src)
    outputs.dir('gen/org/ocaml/sexp/parser/')

    classpath configurations.gen
}

task generateJbuildPsiAndParser(type: JavaExec) {
    ext.src     = "parser/jbuild/jbuild.bnf"
    ext.dstRoot = "gen"

    main = "org.intellij.grammar.Main"

    args = [ dstRoot, file(src) ]

    inputs  .file   file(src)
    outputs .dir    'gen/org/ocaml/jbuild/parser/'

    classpath configurations.gen
}

compileKotlin {
    dependsOn generateOcamlLexer
    dependsOn generateOcamlPsiAndParser

    dependsOn generateSexpLexer
    dependsOn generateSexpPsiAndParser

    dependsOn generateJbuildPsiAndParser
}

test {
    testLogging {
        exceptionFormat = 'full'
    }
}